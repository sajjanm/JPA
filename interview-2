public class DbConnection {
    Connection connection=null;
    PreparedStatement stmt=null;
    
    public DbConnection(){
    }
    
    public void open() throws SQLException,ClassNotFoundException{
        Class.forName(DbConstant.DB_DRIVER);
        connection=DriverManager.getConnection(DbConstant.DB_URL,DbConstant.DB_USER,DbConstant.DB_PASSWORD);
    }
    
    public PreparedStatement init(String sql) throws SQLException{
        stmt=connection.prepareStatement(sql);
        return stmt;
    }
    
    public int executeUpdate() throws SQLException{
        return stmt.executeUpdate();
    }
    
    public ResultSet executeQuery() throws SQLException{
        return stmt.executeQuery();
    }
    
    public void close() throws SQLException{
        if(connection!=null && !connection.isClosed()){
            connection.close();
            connection=null;
        }
    }
    
}


public class DbConstant {
    public final static String DB_DRIVER="com.mysql.jdbc.Driver";
    public final static String DB_URL="jdbc:mysql://localhost:3306/training_center";
    public final static String DB_USER="root";
    public final static String DB_PASSWORD="";
}


public final static String COURSE_INSERT="INSERT INTO " + TableConstant.COURSE
            + "(course_name,course_description,fees,duration,duration_type,status)"
            +" VALUEs(?,?,?,?,?,?)";

public class CourseDAOImpl implements CourseDAO {
    private DbConnection conn=new DbConnection();

    @Override
    public int insert(Course c) throws SQLException, ClassNotFoundException {
        conn.open();
        PreparedStatement stmt=conn.init(SQLConstant.COURSE_INSERT);
        stmt.setString(1, c.getName());
        stmt.setString(2, c.getDescription());
        stmt.setDouble(3, c.getFees());
        stmt.setInt(4, c.getDuration());
        stmt.setString(5, c.getDurationType());
        stmt.setBoolean(6, c.isStatus());
        int result=conn.executeUpdate();
        conn.close();
        return result;
    }

    @Override
    public int update(Course t) throws SQLException, ClassNotFoundException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public int delete(int id) throws SQLException, ClassNotFoundException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Course getbyId(int id) throws SQLException, ClassNotFoundException {
        Course course=null;
        conn.open();
        PreparedStatement stmt=conn.init(SQLConstant.COURSE_GETBYID);
        stmt.setInt(1, id);
        ResultSet rs=conn.executeQuery();
        while(rs.next()){
            course=mapData(rs);
        }
        conn.close();
        return course;
    }

    @Override
    public List<Course> getAll(boolean show) throws SQLException, ClassNotFoundException {
        List<Course> courseList=new ArrayList<>();
        conn.open();
        String sql=(!show)?SQLConstant.COURSE_GETALL + " WHERE status=1":SQLConstant.COURSE_GETALL;
        PreparedStatement stmt=conn.init(sql);
        ResultSet rs=conn.executeQuery();
        while(rs.next()){

            Course course=mapData(rs);
            courseList.add(course);
        }
        conn.close();
        return courseList;
    }
    
    private Course mapData(ResultSet rs) throws SQLException{
        Course course=new Course();
        course.setId(rs.getInt("id"));
        course.setName(rs.getString("course_name"));
        course.setDescription(rs.getString("course_description"));
        course.setFees(rs.getDouble("fees"));
        course.setDuration(rs.getInt("duration"));
        course.setDurationType(rs.getString("duration_type"));
        course.setAddedDate(rs.getDate("added_date"));
        course.setModifiedDate(rs.getDate("modified_date"));
        course.setStatus(rs.getBoolean("status"));
        return course;
    }

    @Override
    public int count() throws SQLException, ClassNotFoundException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    
    
    
}
